import{_ as i,c as a,e,o as n}from"./app-Bo1vGDNN.js";const l={};function h(t,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="_5-1-包和crate" tabindex="-1"><a class="header-anchor" href="#_5-1-包和crate"><span>5.1 包和<code>Crate</code></span></a></h2><p><code>Crate</code>有两种形式：二进制<code>Crate</code>和库<code>Crate</code>。</p><p>二进制<code>Crate</code>：可以被编译为可执行程序，比如命令行程序或者服务端</p><p>库<code>Crate</code>：没有<code>main</code>函数，不会编译为可执行程序，定义了可供多个项目复用的功能模块</p><p>关键字：命名项的 <code>路径（paths）</code>；用来将路径引入作用域的 <code>use</code> 关键字；以及使项变为公有的 <code>pub</code> 关键字、 <code>as</code> 关键字、<code>外部包（external packages）</code>和 <code>glob</code> 运算符（glob operator）。</p><div class="hint-container important"><p class="hint-container-title">模块小抄</p><p>1、<strong>从 <code>crate</code> 根节点开始</strong>: 当编译一个 <code>crate</code>, 编译器首先在 <code>crate</code> 根文件（通常，对于一个库 <code>crate</code> 而言是 <code>src/lib.rs</code>，对于一个二进制 <code>crate</code> 而言是 <code>src/main.rs</code>）中寻找需要被编译的代码。</p><p>2、<strong>声明模块</strong>: 在<code> crate</code> 根文件中，你可以声明一个新模块；比如，用 <code>mod garden;</code>, 声明了一个叫做 <code>garden</code> 的模块。编译器会在下列路径中寻找模块代码：</p><ul><li><p><em>内联</em>，用大括号替换 <code>mod garden</code> 后跟的分号</p></li><li><p>在文件 <code>src/garden.rs</code></p></li><li><p>在文件 <code>src/garden/mod.rs</code></p></li></ul><p>3、<strong>声明子模块</strong>: 在除了 <code>crate</code> 根节点以外的任何文件中，可以定义子模块。比如，可能在 <code>src/garden.rs</code> 中声明 <code>mod vegetables;</code>。编译器会在以父模块命名的目录中寻找子模块代码：</p><ul><li><p>内联，直接在 <code>mod vegetables</code> 后方不是一个分号而是一个大括号</p></li><li><p>在文件 <code>src/garden/vegetables.rs</code></p></li><li><p>在文件 <code>src/garden/vegetables/mod.rs</code></p></li></ul><p>4、<strong>模块中的代码路径</strong>: 一旦一个模块是你 <code>crate</code> 的一部分，你可以在隐私规则允许的前提下，从同一个 <code>crate</code> 内的任意地方，通过代码路径引用该模块的代码。举例而言，一个 <code>garden vegetables</code> 模块下的 <code>Asparagus</code> 类型可以通过 <code>crate::garden::vegetables::Asparagus</code> 访问。</p><p>5、<strong>私有 vs 公用</strong>: 一个模块里的代码默认对其父模块私有。为了使一个模块公用，应当在声明时使用 <code>pub mod</code> 替代 <code>mod</code>。为了使一个公用模块内部的成员公用，应当在声明前使用<code>pub</code>。</p><p>6、<strong>use 关键字</strong>: 在一个作用域内，use关键字创建了一个项的快捷方式，用来减少长路径的重复。在任何可以引用 <code>crate::garden::vegetables::Asparagus</code> 的作用域，可以通过 <code>use crate::garden::vegetables::Asparagus; </code>创建一个快捷方式，然后你就可以在作用域中只写 <code>Asparagus</code> 来使用该类型。</p></div><h2 id="_5-2-引用模块树中项的路径" tabindex="-1"><a class="header-anchor" href="#_5-2-引用模块树中项的路径"><span>5.2 引用模块树中项的路径</span></a></h2><p>路径有两种形式：</p><p>（1）<strong>绝对路径</strong>：以 <code>crate</code> 根开头的完整路径，对于外部<code>crate</code>的代码，是以<code>crate</code>名开头的绝对路径，对于前<code>crate</code>的代码，则以字面值<code>crate</code>开头</p><p>（2）<strong>相对路径</strong>：从当前模块开始，以 <code>self</code>、<code>super</code>或当前模块中的某个标识符开头</p><p>绝对路径和相对路径都后跟一个或多个由双冒号（<code>::</code>）分割的标识符</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // hosting模块是私有的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> eat_at_restaurant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 绝对路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  crate</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">front_of_house</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hosting</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 相对路径</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  front_of_house</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hosting</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择使用相对路径还是绝对路径要取决于你的项目，也取决于你是更倾向于将项的定义代码与使用该项的代码分开来移动，还是一起移动。 在 Rust 中，所有项（函数、方法、结构体、枚举、模块和常量）默认对父模块都是私有的。如果希望创建一个如函数或结构体的私有项，可以将其放入一个模块。</p><h3 id="_1、使用pub关键字暴露路径" tabindex="-1"><a class="header-anchor" href="#_1、使用pub关键字暴露路径"><span>1、使用<code>pub</code>关键字暴露路径</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// -- snip --</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述修改还是有问题，因为；模块公有并不使其内容也是公有的。<code>add_to_waitlist</code> 函数是私有的。私有性规则不但应用于模块，还应用于结构体、枚举、函数和方法。</p><p>模块上的 <code>pub</code> 关键字只允许其父模块引用它，而不允许访问内部代码。因为模块是一个容器，只是将模块变为公有能做的其实并不太多；同时需要更深入地选择将一个或多个项变为公有。</p><p>需要改成：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// -- snip --</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-使用use关键字将路径引入作用域" tabindex="-1"><a class="header-anchor" href="#_5-3-使用use关键字将路径引入作用域"><span>5.3 使用<code>use</code>关键字将路径引入作用域</span></a></h2><p>无论我们选择 <code>add_to_waitlist</code> 函数的绝对路径还是相对路径，每次我们想要调用 <code>add_to_waitlist</code> 时，都必须指定<code>front_of_house</code> 和 <code>hosting</code>。</p><p>使用<code>use</code>即可解决问题：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> crate</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">front_of_house</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> eat_at_restaurant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    hosting</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在作用域中增加 use 和路径类似于在文件系统中创建软连接（符号连接，symbolic link）。</p><h3 id="_1、使用-as-关键字提供新的名称" tabindex="-1"><a class="header-anchor" href="#_1、使用-as-关键字提供新的名称"><span>1、使用 as 关键字提供新的名称</span></a></h3><p>使用父模块可以区分这两个 <code>Result</code> 类型，如果使用<code>Result</code>的完整路径，则不知道用的是哪个<code>Resut</code></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fmt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // --snip--</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> io</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;()&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // --snip--</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>use</code> 将两个同名类型引入同一作用域这个问题还有另一个解决办法：在这个类型的路径后面，我们使用 <code>as</code> 指定一个新的本地名称或者别名。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fmt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">io</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Result</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> IoResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // --snip--</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> IoResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;()&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // --snip--</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、-使用-pub-use-重导出名称" tabindex="-1"><a class="header-anchor" href="#_2、-使用-pub-use-重导出名称"><span>2、 使用 pub use 重导出名称</span></a></h3><p>使用 <code>use</code> 关键字，将某个名称导入当前作用域后，该名称对此作用域之外还是私有的。若要让作用域之外的代码能够像在当前作用域中一样使用该名称，可以将<code> pub</code> 与 <code>use</code> 组合使用。这种技术被称为<code>重导出（re-exporting）</code>，因为在把某个项目导入当前作用域的同时，也将其暴露给其他作用域。</p><div class="hint-container info"><p class="hint-container-title">通过<code>pub use</code>使名称可从新作用域中被导入至任何代码</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> use</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> crate</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">front_of_house</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> eat_at_restaurant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    hosting</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3、使用外部包" tabindex="-1"><a class="header-anchor" href="#_3、使用外部包"><span>3、使用外部包</span></a></h3><p><a href="https://crates.io/" target="_blank" rel="noopener noreferrer">crates.io</a> 上有很多 Rust 社区成员发布的包，将其引入你自己的项目都需要一道相同的步骤：在 Cargo.toml 列出它们并通过 use 将其中定义的项引入项目包的作用域中。</p><p>注意 std 标准库对于你的包来说也是外部 crate。因为标准库随 Rust 语言一同分发，无需修改 Cargo.toml 来引入 std，不过需要通过 use 将标准库中定义的项引入项目包的作用域中来引用它们。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">collections</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">HashMap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4、使用嵌套路径来清理大量的-use-列表" tabindex="-1"><a class="header-anchor" href="#_4、使用嵌套路径来清理大量的-use-列表"><span>4、使用嵌套路径来清理大量的 <code>use</code> 列表</span></a></h3><p>当需要引入很多定义于相同包或相同模块的项时，为每一项单独列出一行会占用源码大量的垂直空间。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --snip--</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmp</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Ordering</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --snip--</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用嵌套路径将相同的项在一行中引入作用域。这么做需要指定路径的相同部分，接着是两个冒号，接着是大括号中的各自不同的路径部分</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --snip--</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmp</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Ordering</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --snip--</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">io</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 可以写成</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、glob-运算符-慎用" tabindex="-1"><a class="header-anchor" href="#_5、glob-运算符-慎用"><span>5、<code>glob</code> 运算符（慎用）</span></a></h3><p>如果希望将一个路径下所有公有项引入作用域，可以指定路径后跟 <code>*</code> glob 运算符：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">collections</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-4-将模块拆分成多个文件" tabindex="-1"><a class="header-anchor" href="#_5-4-将模块拆分成多个文件"><span>5.4 将模块拆分成多个文件</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>src/lib.rs </code></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 声明 front_of_house 模块，其内容将位于 \`src/front_of_house.rs\`</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> front_of_house</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> use</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> crate</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">front_of_house</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> eat_at_restaurant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  hosting</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/front_of_house.rs</code></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在 \`src/front_of_house.rs\` 中定义 \`front_of_house\` 模块</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container info"><p class="hint-container-title">模块拆分后</p><p><code>src/front_of_house.rs</code></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mod</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hosting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>src/front_of_house/hosting.rs</code></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_to_waitlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>src/lib.rs</code> 中的 <code>pub use crate::front_of_house::hosting</code> 语句也并未发生改变，<code>use</code> 也不会对哪些文件会被编译为 <code>crate</code> 的一部分有任何影响。<code>mod</code> 关键字声明了模块，而 <code>Rust</code> 会在与模块同名的文件中查找模块的代码。</p></div>`,48)])])}const k=i(l,[["render",h]]),p=JSON.parse('{"path":"/rust/kwjkhmb9/","title":"包、Crate和模块管理","lang":"zh-CN","frontmatter":{"title":"包、Crate和模块管理","createTime":"2025/09/17 16:59:42","permalink":"/rust/kwjkhmb9/","watermark":true},"readingTime":{"minutes":6.62,"words":1986},"git":{"createdTime":1758110329000,"updatedTime":1758110329000,"contributors":[{"name":"yevachenchen","username":"yevachenchen","email":"yevachenchen@didiglobal.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yevachenchen?v=4","url":"https://github.com/yevachenchen"}]},"filePathRelative":"notes/rust/article6.md","headers":[]}');export{k as comp,p as data};
